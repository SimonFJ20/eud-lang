
=== EXAMPLES ===

2 + 1
2 - 1
2 * 1
2 / 1
2 % 1

2 < 1
2 > 1
2 <= 1
2 >= 1
2 == 1
2 != 1

3 + 4 * 5
(3 + 4) * 5

i32 a = 5
f64 b = 0.5
char c = 'a'
string d = "hello world"
bool e = true

a = 2

if a < 4 then
    print("hello world")
end

while a < 7 do
    print(a)
    a = a + 1
end

int i = 0
while true do
    if i >= i then
        break
    end

    print(i)

    i = i + 1
end

func test()
    i32 a = 5
    i32 b = 3
    i32 c = a + b
    return c
end

=== GRAMMAR ===

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence

func_def        :   "func" IDENTIFIER LPAREN declarations RPAREN FTYP_OP IDENTIFIER statement "end"

while           :   "while" expression "do" statement "end"

if_else         :   "if" expression "then" statement "else" statement "end"

if              :   "if" expression "then" statement "end"

expression      :   assignment

assignment      :   ternary ASGN_OP assignment
                |   ternary

ternary         :   logical_or TNDO_OP ternary TELS_OP  ternary
                |   logical_or

logical_or      :   logical_or LGOR_OP logical_and
                |   logical_and

logical_and     :   logical_and LAND_OP bitwise_or
                |   bitwise_or

bitwise_or      :   bitwise_or BWOR_OP bitwise_xor
                |   bitwise_xor

bitwise_xor     :   bitwise_xor BXOR_OP bitwise_and
                |   bitwise_and

bitwise_and     :   bitwise_and BAND_OP equality
                |   equality

equality        :   equality EQ_OP inequality
                |   inequality

inequality      :   inequality IEQ_OP compare_lt
                |   compare_lt

compare_lt      :   compare_lt LT_OP compare_lte
                |   compare_lte

compare_lte     :   compare_lte LT_OP compare_gt
                |   compare_gt

compare_gt      :   compare_gt LT_OP compare_gte
                |   compare_gte

compare_gte     :   compare_gte LT_OP bit_shift_left
                |   bit_shift_left

bit_shift_left  :   bit_shift_left BLSH_OP bit_shift_right
                |   bit_shift_right

bit_shift_right :   bit_shift_right BLSH_OP addition
                |   addition

addition        :   addition ADD_OP    subtraction
                |   subtraction

subtraction     :   subtraction SUB_OP multiplication
                |   multiplication

multiplication  :   multiplication MUL_OP division
                |   division

division        :   division DIV_OP    remainder
                |   remainder

remainder       :   remainder MOD_OP exponentation
                |   exponentation

exponentation   :   increment EXP_OP exponentation
                |   increment

logical_not     :   LNOT_OP logical_not
                |   bitwise_not

bitwise_not     :   BNOT_OP bitwise_not
                |   unary_plus

unary_plus      :   ADD_OP unary_plus
                |   unary_negation

unary_negation  :   SUB_OP unary_negation
                |   pre_increment

pre_increment   :   pre_increment INCR_OP
                |   pre_decrement

pre_decrement   :   pre_decrement DECR_OP
                |   post_increment

post_increment  :   post_increment INCR_OP
                |   decrement

post_decrement  :   post_decrement DECR_OP
                |   member_access

member_access   :   member_access MBAC_OP computed_member
                |   computed_member

computed_member :   computed_member LBRACKET value RBRACKET
                |   value

func_call       :   value LPAREN values RPAREN

value           :   INT
                |   FLOAT
                |   CHAR
                |   STRING
                |   IDENTIFIER
                |   LPAREN expr RPAREN


